import time
import GPUtil
import psutil

# GPU Metrics
def get_gpu_usage():
    gpus = GPUtil.getGPUs()
    gpu_usage = []
    for gpu in gpus:
        gpu_usage.append({
            'gpu_id': gpu.id,
            'gpu_name': gpu.name,
            'gpu_memory_total': gpu.memoryTotal,
            'gpu_memory_used': gpu.memoryUsed,
            'gpu_util': gpu.load * 100,  # ✅ Fixed GPU utilization calculation
            'gpu_temp': gpu.temperature
        })
    return gpu_usage

# System Metrics
def get_system_metrics():
    cpu_usage = psutil.cpu_percent(interval=1)
    cpu_count = psutil.cpu_count()
    cpu_times = psutil.cpu_times_percent(interval=1, percpu=False)
    
    # Get CPU temperature (Handle Windows Compatibility)
    cpu_temp = None
    try:
        temps = psutil.sensors_temperatures()
        if temps and 'coretemp' in temps:
            cpu_temp = temps['coretemp'][0].current
    except (AttributeError, KeyError):
        cpu_temp = None  # ✅ Fixed Windows compatibility

    system_metrics = {
        'cpu_usage': cpu_usage,
        'cpu_count': cpu_count,
        'cpu_user_time': cpu_times.user,
        'cpu_system_time': cpu_times.system,
        'cpu_idle_time': cpu_times.idle,
        'cpu_temp': cpu_temp
    }
    
    return system_metrics

# FPS Metrics
class FPS:
    def __init__(self):
        self.start_time = None
        self.frame_count = 0

    def start(self):
        self.start_time = time.time()
        self.frame_count = 0

    def update(self):
        self.frame_count += 1

    def get_fps(self):
        if self.start_time is None:
            return 0
        elapsed_time = time.time() - self.start_time
        return self.frame_count / elapsed_time if elapsed_time > 0 else 0

def get_gpu_fps():
    fps = FPS()
    fps.start()
    time.sleep(1)  # Simulate a delay to gather GPU load
    gpus = GPUtil.getGPUs()
    for gpu in gpus:
        if gpu.load > 0:  # Only update FPS if GPU load is greater than 0
            fps.update()
    return fps.get_fps()

if __name__ == "__main__":
    print("GPU Usage:", get_gpu_usage())
    print("System Metrics:", get_system_metrics())
    print("GPU FPS:", get_gpu_fps())


import logging
import os

def setup_logger():
    # Create logs directory if it doesn't exist
    log_dir = os.path.join(os.path.dirname(__file__), '../../sysdata/logs')
    os.makedirs(log_dir, exist_ok=True)

    log_file = os.path.join(log_dir, 'app.log')

    # Configure the logger
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",  # ✅ Added timestamp
        handlers=[
            logging.FileHandler(log_file),  # ✅ Logs to a file
            logging.StreamHandler()  # ✅ Also logs to console
        ]
    )
    return logging.getLogger(__name__)

logger = setup_logger()

if __name__ == "__main__":
    logger.info("Logger is set up.")  # ✅ Test log



from .metrics.metrics import get_gpu_usage, get_system_metrics, get_gpu_fps # type: ignore
try:
    from .utils.logger import logger
except ImportError:
    import logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

# Function to monitor system metrics and log the information
def monitor_system():
    logger.info("Monitoring system...")
    
    try:
        gpu_usage = get_gpu_usage()  # Get GPU usage
        system_metrics = get_system_metrics()  # Get system metrics
        gpu_fps = get_gpu_fps()  # Get GPU frames per second

        logger.info(f"GPU Usage: {gpu_usage}")  # Log GPU usage
        logger.info(f"System Metrics: {system_metrics}")  # Log system metrics
        logger.info(f"GPU FPS: {gpu_fps}")  # Log GPU FPS
        logger.info(f"CPU Temperature: {system_metrics.get('cpu_temp', 'N/A')}")  # Log CPU temperature

    except Exception as e:
        logger.error(f"Error collecting metrics: {e}")

# Main entry point of the script
if __name__ == "__main__":
    monitor_system()





import streamlit as st
import subprocess
import os
import json
import time
import shutil
import pandas as pd
import matplotlib.pyplot as plt

st.title("System Metrics Dashboard")

# Initialize session state for process
if 'process' not in st.session_state:
    st.session_state.process = None

start_collection = st.checkbox('Start Metrics Collection')

# Add a simple checkbox
simple_checkbox = st.checkbox('Show Real-time Graphs')

if start_collection:
    if st.session_state.process is None:
        # Start the metrics collection script
        st.session_state.process = subprocess.Popen(["python", "../vscode3/sysdata/update_metrics.py"])
        st.write("Metrics collection started.")
        time.sleep(5)  # Increase the delay to allow more time for the JSON file to be generated
else:
    if st.session_state.process is not None:
        # Terminate the metrics collection script
        st.session_state.process.terminate()
        st.write("Metrics collection terminated.")
        st.session_state.process = None
        # Delete the data directory
        data_dir = os.path.join(os.path.dirname(__file__), '../sysdata/data')
        if os.path.exists(data_dir):
            shutil.rmtree(data_dir)

data_dir = os.path.join(os.path.dirname(__file__), '../sysdata/data')
metrics_file_path = os.path.join(data_dir, 'metrics.json')

if os.path.exists(metrics_file_path):
    st.write("Metrics file found.")
    
    # Create placeholders for the metrics
    cpu_usage_placeholder = st.empty()
    cpu_count_placeholder = st.empty()
    cpu_user_time_placeholder = st.empty()
    cpu_system_time_placeholder = st.empty()
    cpu_idle_time_placeholder = st.empty()
    cpu_temp_placeholder = st.empty()
    gpu_metrics_placeholder = st.empty()
    fps_placeholder = st.empty()

    while start_collection:
        with open(metrics_file_path, 'r') as file:
            metrics = json.load(file)
        
        # Update placeholders with the latest metrics
        cpu_usage_placeholder.text(f"CPU Usage: {metrics['cpu_metrics']['cpu_usage']}%")
        cpu_count_placeholder.text(f"CPU Count: {metrics['cpu_metrics']['cpu_count']}")
        cpu_user_time_placeholder.text(f"CPU User Time: {metrics['cpu_metrics']['cpu_user_time']}%")
        cpu_system_time_placeholder.text(f"CPU System Time: {metrics['cpu_metrics']['cpu_system_time']}%")
        cpu_idle_time_placeholder.text(f"CPU Idle Time: {metrics['cpu_metrics']['cpu_idle_time']}%")
        cpu_temp_placeholder.text(f"CPU Temperature: {metrics['cpu_metrics']['cpu_temp']}°C")
        
        gpu_metrics = metrics['gpu_metrics'][0]  # Assuming single GPU for simplicity
        gpu_metrics_placeholder.text(f"GPU {gpu_metrics['gpu_id']} - {gpu_metrics['gpu_name']}: {gpu_metrics['gpu_util']}% Utilization, {gpu_metrics['gpu_temp']}°C")
        
        fps_placeholder.text(f"FPS: {metrics['fps']}")
        
        time.sleep(2)  # Update every 2 seconds
        
        if not start_collection:
            st.session_state.process.terminate()
            st.write("Metrics collection terminated.")
            st.session_state.process = None
            # Delete the data directory
            if os.path.exists(data_dir):
                shutil.rmtree(data_dir)
            break
else:
    st.write("Metrics file not found. Please start the metrics collection.")

# Real-time graphs for GPU temperature, FPS, and CPU utilization
if simple_checkbox:
    logs_file_path = os.path.join(os.path.dirname(__file__), '../sysdata/logs/logs.csv')
    if os.path.exists(logs_file_path):
        df = pd.read_csv(logs_file_path)
        
        st.write("Real-time Graphs")
        
        # GPU Temperature Graph
        fig, ax = plt.subplots()
        ax.plot(df['timestamp'], df['gpu_temp'], label='GPU Temperature')
        ax.set_xlabel('Timestamp')
        ax.set_ylabel('Temperature (°C)')
        ax.legend()
        st.pyplot(fig)
        
        # FPS Graph
        fig, ax = plt.subplots()
        ax.plot(df['timestamp'], df['fps'], label='FPS')
        ax.set_xlabel('Timestamp')
        ax.set_ylabel('FPS')
        ax.legend()
        st.pyplot(fig)
        
        # CPU Utilization Graph
        fig, ax = plt.subplots()
        ax.plot(df['timestamp'], df['cpu_usage'], label='CPU Utilization')
        ax.set_xlabel('Timestamp')
        ax.set_ylabel('CPU Usage (%)')
        ax.legend()
        st.pyplot(fig)
    else:
        st.write("Logs file not found.")




        import sys
import os
import csv
import json
import time
import signal
import shutil
from datetime import datetime

# Add the parent directory to sys.path
sys.path.append(os.path.abspath(os.path.join(os.getcwd(), '..', 'backend')))

try:
    from backend.metrics.metrics import get_gpu_usage, get_system_metrics, get_gpu_fps  # type: ignore
except ImportError as e:
    print(f"Error importing metrics module: {e}")
    sys.exit(1)

terminate = False

def update_metrics():
    global terminate
    try:
        # Gather metrics
        metrics = {
            "cpu_metrics": get_system_metrics(),
            "gpu_metrics": get_gpu_usage(),
            "fps": get_gpu_fps(),
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # ✅ Convert timestamp to readable format
        }

        # Save metrics to JSON file
        data_dir = os.path.join(os.path.dirname(__file__), 'data')
        os.makedirs(data_dir, exist_ok=True)
        metrics_file_path = os.path.join(data_dir, 'metrics.json')

        with open(metrics_file_path, 'w') as file:
            json.dump(metrics, file, indent=4)

        # Append metrics to CSV log file
        logs_dir = os.path.join(os.path.dirname(__file__), 'logs')
        os.makedirs(logs_dir, exist_ok=True)
        logs_file_path = os.path.join(logs_dir, 'logs.csv')

        file_exists = os.path.isfile(logs_file_path)
        with open(logs_file_path, 'a', newline='') as csvfile:
            fieldnames = [
                'timestamp', 'cpu_usage', 'cpu_count', 'cpu_user_time', 'cpu_system_time',
                'cpu_idle_time', 'cpu_temp', 'gpu_id', 'gpu_name', 'gpu_memory_total',
                'gpu_memory_used', 'gpu_util', 'gpu_temp', 'fps'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            if not file_exists:
                writer.writeheader()
            
            for gpu in metrics['gpu_metrics']:
                writer.writerow({
                    'timestamp': metrics['timestamp'],
                    'cpu_usage': metrics['cpu_metrics']['cpu_usage'],
                    'cpu_count': metrics['cpu_metrics']['cpu_count'],
                    'cpu_user_time': metrics['cpu_metrics']['cpu_user_time'],
                    'cpu_system_time': metrics['cpu_metrics']['cpu_system_time'],
                    'cpu_idle_time': metrics['cpu_metrics']['cpu_idle_time'],
                    'cpu_temp': metrics['cpu_metrics']['cpu_temp'],
                    'gpu_id': gpu['gpu_id'],
                    'gpu_name': gpu['gpu_name'],
                    'gpu_memory_total': gpu['gpu_memory_total'],
                    'gpu_memory_used': gpu['gpu_memory_used'],
                    'gpu_util': gpu['gpu_util'],
                    'gpu_temp': gpu['gpu_temp'],
                    'fps': metrics['fps']
                })
    
    except Exception as e:
        print(f"Error updating metrics: {e}")

def terminate_metrics_collection(signum, frame):
    global terminate
    print("Terminating metrics collection...")
    data_dir = os.path.join(os.path.dirname(__file__), 'data')
    if os.path.exists(data_dir):
        shutil.rmtree(data_dir)
    terminate = True

if __name__ == "__main__":
    signal.signal(signal.SIGINT, terminate_metrics_collection)
    while not terminate:
        update_metrics()
        time.sleep(0.5)




System Metrics Dashboard 🖥️📊
A real-time monitoring dashboard that tracks CPU usage, GPU usage, FPS, and temperature. Built with Python, Streamlit, and psutil/GPUtil.

📌 Features
✅ Real-time CPU & GPU monitoring (Usage, Temperature, Utilization)
✅ Live FPS counter
✅ Automatic logging to JSON & CSV
✅ Interactive Streamlit Dashboard with real-time graphs
✅ Auto-starts data collection when the dashboard is launched

🚀 Installation & Setup

1️⃣ Install Dependencies
Run this in your terminal: pip install psutil GPUtil streamlit pandas matplotlib

2️⃣ Start the Dashboard
Simply run:
streamlit run frontend/dashboard.py

✅ Automatically starts system monitoring
✅ Opens a web UI for visualization

📊 How It Works
1️⃣ Backend (backend/) → Collects system metrics using psutil & GPUtil.
2️⃣ Sysdata (sysdata/) → Stores metrics in metrics.json & logs.csv.
3️⃣ Frontend (frontend/) → A Streamlit dashboard visualizing real-time data.

✅ The dashboard automatically starts & stops data collection.

📂 Project Structure

vscode3/
├── backend/               # Core logic for data collection
│   ├── metrics/           # System monitoring scripts
│   │   └── metrics.py     # CPU, GPU, FPS collection
│   ├── utils/             # Helper utilities
│   │   └── logger.py      # Logging system
│   └── monitor.py         # Runs the monitoring system
├── frontend/              # User interface (Streamlit)
│   └── dashboard.py       # Main dashboard
├── sysdata/               # Data storage
│   ├── data/              # JSON metric storage
│   ├── logs/              # CSV logs
│   └── update_metrics.py  # Background process for metrics
└── README.md              # Project documentation

📌 Data Storage & Logging
JSON File: sysdata/data/metrics.json → Stores the latest system stats.
CSV File: sysdata/logs/logs.csv → Keeps a history of system performance.
Log File: sysdata/logs/app.log → Debugging logs for tracking issues.

📈 Viewing Real-Time Graphs
1️⃣ Start the dashboard using:
streamlit run frontend/dashboard.py

2️⃣ Check "Show Real-time Graphs" checkbox.

3️⃣ View CPU Usage, GPU Temperature, and FPS trends.

🛑 Stopping the Metrics Collection
Option 1: From the Dashboard
Uncheck "Start Metrics Collection"
✅ The process will automatically stop & delete old data.
Option 2: Manually Kill the Process
If the process doesn't stop, run:
pkill -f update_metrics.py  # Linux/Mac
taskkill /IM python.exe /F  # Windows (If running as python.exe)

🐛 Debugging & Troubleshooting
1️⃣ Metrics Not Updating?
Check if update_metrics.py is running.
Restart by stopping and restarting the dashboard.
2️⃣ No GPU Data?
Make sure you have a dedicated GPU (like NVIDIA).
Try running: python -c "import GPUtil; print(GPUtil.getGPUs())"

If no output, GPUtil isn’t detecting your GPU.
3️⃣ Logs Not Updating?
Check the log file: 
cat sysdata/logs/app.log  # Linux/Mac
type sysdata/logs/app.log  # Windows

📜 License
This project is open-source and free to use.

💡 Future Improvements
🚀 Add network monitoring
🚀 Improve multi-GPU support
🚀 Add email alerts for overheating

🎉 Now You're Ready to Monitor Your System in Real-Time!
Run the dashboard and enjoy live performance tracking! 🚀📊